AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

### b2 photo permissions public reads

Resources:
  lf1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: index-photos-lf1
      Tracing: Active
      Timeout: 30
      CodeUri: ./backend/
      Handler: lf1.main
      Runtime: python3.9
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - S3FullAccessPolicy:
            BucketName: !Ref b2
        ### Rekognition
      Environment:
        Variables:
          B2_BUCKET_NAME: !Ref b2
        ### Opensearch urls
      # Event:
        ### B2 invocation
  
  lf2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: search-photos-lf2
      Tracing: Active
      Timeout: 30
      CodeUri: ./backend/
      Handler: lf2.main
      Runtime: python3.9
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - S3FullAccessPolicy:
            BucketName: !Ref b2
        ### Lex
      Environment:
        Variables:
          B2_BUCKET_NAME: !Ref b2
        ### Opensearch urls
        ### Lex info

  b1:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  b1BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref b1
                - /*
      Bucket: !Ref b1

  b2:
    Type: AWS::S3::Bucket

  openSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: ccbdassignment2
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "arn:aws:es:*:*:domain/ccbdassignment2/*"
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: "false"
        InstanceCount: "1"
        ZoneAwarenessEnabled: "false"
        InstanceType: "t3.small.elasticsearch"
      ElasticsearchVersion: 7.1
      EBSOptions:
        EBSEnabled: true
        Iops: 3000
        VolumeSize: 10
        VolumeType: "gp3"
      DomainEndpointOptions:
        EnforceHTTPS: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: b4c0bb91-eaf2-4501-9d80-beac82d626de
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: masterUserCCBDHW2
          MasterUserPassword: ILikeBigMuttsAndICannotL13!

  apiRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - EDGE
      Name: ccbd-assignment-2
  
  apiSearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiRest.RootResourceId
      PathPart: search
      RestApiId: !Ref apiRest

  apiSearchGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt apiLf2IamRole.Arn
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lf2.Arn}/invocations'
      OperationName: search
      ResourceId: !Ref apiSearchResource
      RestApiId: !Ref apiRest

  apiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref apiRest
      Schema: {}

  apiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref apiDeployment
      RestApiId: !Ref apiRest
      StageName: dev

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiSearchGetMethod
    Properties:
      RestApiId: !Ref apiRest

  apiLf2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: lf2ApiAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt lf2.Arn

  lf2ApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lf2.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApi}/dev/GET/search

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - b1
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - b1
          - DomainName
    Description: Name of S3 bucket to hold website content      
