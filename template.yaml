AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

# b2 photo permissions public reads
# Rekognition ???
# Lex ???

Parameters:
  B2BUCKETNAME:
    Type: String
    Default: ccbdhw2-b2-photos-bucket

Resources:
  lf1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: index-photos-lf1
      Tracing: Active
      Timeout: 30
      CodeUri: ./backend/
      Handler: lf1.main
      Runtime: python3.9
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - AmazonS3FullAccess
        - RekognitionDetectOnlyPolicy: {}
        - RekognitionFacesPolicy: {}
        - RekognitionLabelsPolicy: {}
      Environment:
        Variables:
          B2_BUCKET_NAME: B2BUCKETNAME
          OPENSEARCH_LINK: !GetAtt openSearch.DomainEndpoint
  
  lf2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: search-photos-lf2
      Tracing: Active
      Timeout: 30
      CodeUri: ./backend/
      Handler: lf2.main
      Runtime: python3.9
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - S3FullAccessPolicy:
            BucketName: B2BUCKETNAME
        - AmazonLexFullAccess
      Environment:
        Variables:
          B2_BUCKET_NAME: B2BUCKETNAME
          OPENSEARCH_LINK: !GetAtt openSearch.DomainEndpoint

  b1:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  b1BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref b1
                - /*
      Bucket: !Ref b1

  b2:
    Type: AWS::S3::Bucket
    DependsOn: lf1B2Invoke
    Properties:
      BucketName: !Ref B2BUCKETNAME
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls : false
        BlockPublicPolicy : false
        IgnorePublicAcls : false
        RestrictPublicBuckets : false
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt [lf1, Arn]

  openSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: ccbdassignment2
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: "arn:aws:es:*:*:domain/ccbdassignment2/*"
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: "false"
        InstanceCount: "1"
        ZoneAwarenessEnabled: "false"
        InstanceType: "t3.small.elasticsearch"
      ElasticsearchVersion: 7.1
      EBSOptions:
        EBSEnabled: true
        Iops: 3000
        VolumeSize: 10
        VolumeType: "gp3"
      DomainEndpointOptions:
        EnforceHTTPS: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: b4c0bb91-eaf2-4501-9d80-beac82d626de
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: masterUserCCBDHW2
          MasterUserPassword: ILikeBigMuttsAndICannotL13!

  apiRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: ccbd-assignment-2
      BinaryMediaTypes:
        - "image/jpeg"
        - "image/jpg"
        - "image/png"
  
  apiSearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiRest.RootResourceId
      PathPart: search
      RestApiId: !Ref apiRest

  apiSearchGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiRest
      ResourceId: !Ref apiSearchResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: 
        "method.request.querystring.q": false
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": "Empty"
        ResponseParameters: 
          "method.response.header.Access-Control-Allow-Origin": false
        StatusCode: "200"
      Integration:
        CacheNamespace: !Ref apiSearchResource
        Credentials: !GetAtt apiLf2IamRole.Arn
        ContentHandling: "CONVERT_TO_TEXT"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
        - 
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_TEMPLATES"
        RequestTemplates: 
          "application/json": |
              {
                   "q": "$input.params('q')"
              }
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lf2.Arn}/invocations'

  apiSearchOptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiRest
      ResourceId: !Ref apiSearchResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: {}
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": "Empty"
        ResponseParameters: 
          "method.response.header.Access-Control-Allow-Headers": false
          "method.response.header.Access-Control-Allow-Methods": false
          "method.response.header.Access-Control-Allow-Origin": false
        StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref apiSearchResource
        IntegrationResponses: 
        - 
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  apiUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiRest
      PathPart: "upload"
      ParentId: !GetAtt apiRest.RootResourceId

  apiUploadResourceBucket:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiRest
      PathPart: "{bucket}"
      ParentId: !Ref apiUploadResource

  apiUploadResourceFile:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiRest
      PathPart: "{filename}"
      ParentId: !Ref apiUploadResourceBucket

  apiUploadPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiRest
      ResourceId: !Ref apiUploadResourceFile
      HttpMethod: "PUT"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: 
        "method.request.header.x-amz-meta-customLabels": false
        "method.request.path.bucket": true
        "method.request.path.filename": true
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": "Empty"
        ResponseParameters: 
          "method.response.header.Access-Control-Allow-Origin": false
        StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref apiUploadResourceFile
        Credentials: !GetAtt apiB2IamRole.Arn
        IntegrationHttpMethod: "PUT"
        IntegrationResponses: 
        - 
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestParameters: 
          "integration.request.header.x-amz-meta-customLabels": "method.request.header.x-amz-meta-customLabels"
          "integration.request.path.bucket": "method.request.path.bucket"
          "integration.request.path.filename": "method.request.path.filename"
        TimeoutInMillis: 29000
        Type: "AWS"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{filename}"

  apiUploadOptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiRest
      ResourceId: !Ref apiUploadResourceFile
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      ApiKeyRequired: false
      RequestParameters: 
        "method.request.header.x-amz-meta-customLabels": false
      MethodResponses: 
      - 
        ResponseModels: 
          "application/json": "Empty"
        ResponseParameters: 
          "method.response.header.Access-Control-Allow-Headers": false
          "method.response.header.Access-Control-Allow-Methods": false
          "method.response.header.Access-Control-Allow-Origin": false
        StatusCode: "200"
      Integration: 
        CacheNamespace: !Ref apiUploadResourceFile
        IntegrationResponses: 
        - 
          ResponseParameters: 
            "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-Meta-CustomLabels'"
            "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
            "method.response.header.Access-Control-Allow-Origin": "'*'"
          StatusCode: "200"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates: 
          "application/json": "{\"statusCode\": 200}"
        TimeoutInMillis: 29000
        Type: "MOCK"

  apiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref apiRest
      Schema: {}

  apiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref apiDeployment
      RestApiId: !Ref apiRest
      StageName: dev

  apiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiSearchGetMethod
      - apiSearchOptionMethod
      - apiUploadPutMethod
      - apiUploadOptionMethod
    Properties:
      RestApiId: !Ref apiRest

  apiLf2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: lf2ApiAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt lf2.Arn

  apiB2IamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: "apiB2IamRole"
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600

  apiB2IamPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: apiB2IamPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Join
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref b2
                    - /*
      Roles: 
        - !Ref apiB2IamRole

  lf2ApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lf2.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiRest}/*/*/*

  lf1B2Invoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lf1.Arn
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${B2BUCKETNAME}

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - b1
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - b1
          - DomainName
    Description: Name of S3 bucket to hold website content      
